# 0
# vsim +notimingchecks +nowarnTSCALE +NUMBER_OF_TRANZACTION=16 -sva -nocoverage -quiet -sv_seed 66666 -novopt top 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# ** Warning: (vsim-8441) ../../lab2/test/instr_register_class.sv(83): Clocking block output lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../../lab2/test/instr_register_class.sv(84): Clocking block output lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../../lab2/test/instr_register_class.sv(85): Clocking block output lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../../lab2/test/instr_register_class.sv(82): Clocking block output lab2_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../../lab2/test/instr_register_class.sv(89): Clocking block output lab2_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# First head
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 1
# 
# Writing to register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 6
# 
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 10
#   operand_b = 4
# 
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 0
# 
# Writing to register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 11
#   operand_b = 13
# 
# Writing to register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 11
# 
# Writing to register location 6: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 14
# 
# Writing to register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 8
# 
# Writing to register location 8: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 13
# 
# Writing to register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 3
# 
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 15
# 
# Writing to register location 11: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 2
# 
# Writing to register location 12: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
# 
# Writing to register location 13: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 12
# 
# Writing to register location 14: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 8
# 
# Writing to register location 15: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 9
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 1
#   result = 10
# 
# Read from register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 6
#   result = 6
# 
# Read from register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 10
#   operand_b = 4
#   result = 2
# 
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 0
#   result = 0
# 
# Read from register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 11
#   operand_b = 13
#   result = 0
# 
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   result = 0
# 
# Read from register location 6: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 14
#   result = 56
# 
# Read from register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 8
#   result = 8
# 
# Read from register location 8: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 13
#   result = 1
# 
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 4
#   operand_b = 3
#   result = 7
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 15
#   result = 11
# 
# Read from register location 11: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 2
#   result = 2
# 
# Read from register location 12: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 1
#   result = 12
# 
# Read from register location 13: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 12
#   result = -5
# 
# Read from register location 14: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 8
#   result = 5
# 
# Read from register location 15: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 9
#   result = 9
# 
# TEST PASSED
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../../lab2/test/instr_register_class.sv(63)
#    Time: 340 ns  Iteration: 2  Instance: /top/test
